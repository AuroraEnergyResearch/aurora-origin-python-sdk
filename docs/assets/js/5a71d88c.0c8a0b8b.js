"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[155],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(n),g=r,m=d["".concat(s,".").concat(g)]||d[g]||u[g]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:r,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},9233:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_label:"Scenario",title:"origin_sdk.service.Scenario"},i=void 0,l={unversionedId:"origin_sdk/service/Scenario",id:"origin_sdk/service/Scenario",title:"origin_sdk.service.Scenario",description:"Scenario Objects",source:"@site/docs/origin_sdk/service/Scenario.md",sourceDirName:"origin_sdk/service",slug:"/origin_sdk/service/Scenario",permalink:"/aurora-origin-python-sdk/docs/origin_sdk/service/Scenario",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"Scenario",title:"origin_sdk.service.Scenario"},sidebar:"docSidebar",previous:{title:"Project",permalink:"/aurora-origin-python-sdk/docs/origin_sdk/service/Project"},next:{title:"scenario_enums",permalink:"/aurora-origin-python-sdk/docs/origin_sdk/types/scenario_enums"}},s={},c=[{value:"Scenario Objects",id:"scenario-objects",level:2},{value:"get_downloadable_regions",id:"get_downloadable_regions",level:4},{value:"get_scenario_regions",id:"get_scenario_regions",level:4},{value:"get_scenario_region",id:"get_scenario_region",level:4},{value:"get_download_types",id:"get_download_types",level:4},{value:"get_scenario_data_csv",id:"get_scenario_data_csv",level:4},{value:"get_scenario_dataframe",id:"get_scenario_dataframe",level:4},{value:"refresh",id:"refresh",level:4},{value:"get",id:"get",level:4},{value:"get_latest_scenario_from_region",id:"get_latest_scenario_from_region",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"scenario-objects"},"Scenario Objects"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class Scenario()\n")),(0,r.kt)("p",null,"A Scenario class that holds state in order to provide a more Pythonic\ninterface for Scenario building and downloading outputs"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scenario_id")," ",(0,r.kt)("em",{parentName:"li"},"str")," - The ID to initialise the scenario with. Will fetch\nthe scenario details and populate itself with details"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"session")," ",(0,r.kt)("em",{parentName:"li"},"OriginSession")," - You should first instantiate an OriginSession\nand pass this over to the Scenario.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Attributes"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scenario_id")," ",(0,r.kt)("em",{parentName:"li"},"str")," - The scenario ID"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"session")," ",(0,r.kt)("em",{parentName:"li"},"OriginSession")," - The OriginSession attached to this scenario"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"scenario")," ",(0,r.kt)("em",{parentName:"li"},"ScenarioType")," - The full Scenario object from the service")),(0,r.kt)("h4",{id:"get_downloadable_regions"},"get","_","downloadable","_","regions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_downloadable_regions()\n")),(0,r.kt)("p",null,"A helper function to return the regions available for download from\nthis scenario"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  A list of regions available"),(0,r.kt)("h4",{id:"get_scenario_regions"},"get","_","scenario","_","regions"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_scenario_regions()\n")),(0,r.kt)("p",null,"Helper function to get the regions object on the Scenario, as it","'","s a\ncommon access pattern."),(0,r.kt)("h4",{id:"get_scenario_region"},"get","_","scenario","_","region"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_scenario_region(region: str)\n")),(0,r.kt)("p",null,"Helper function to get a specific region from the regions object, as\nit","'","s a common access pattern."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  RegionDict"),(0,r.kt)("h4",{id:"get_download_types"},"get","_","download","_","types"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_download_types(region: str)\n")),(0,r.kt)("p",null,"Returns the types and granularities of download available for the region. Expect something\nlike ",'"',"system",'"',"|",'"',"technology",'"'," and ",'"',"1y",'"',"|",'"',"1m",'"'," for type and granularity\nrespectively."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("p",null,"  region (String)"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  A list of type and granularity downloads available for the region."),(0,r.kt)("h4",{id:"get_scenario_data_csv"},"get","_","scenario","_","data","_","csv"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_scenario_data_csv(region: str,\n                          download_type: str,\n                          granularity: str,\n                          currency: Optional[str] = None,\n                          force_no_cache: bool = False)\n")),(0,r.kt)("p",null,"Downloads a csv from the service and returns as a string. Recommended to\nuse if looking to generate a csv file on disk."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"region")," ",(0,r.kt)("em",{parentName:"li"},"String")," - The region to download for. Use\n",'"',"get_downloadable_regions",'"'," to see a list of options."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," ",(0,r.kt)("em",{parentName:"li"},"String")," - The ",'"',"type",'"'," of file to download. You can use\n",'"',"get_download_types",'"'," to query the available options."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"granularity")," ",(0,r.kt)("em",{parentName:"li"},"String")," - The ",'"',"granularity",'"'," of file to download. You can use\n",'"',"get_download_types",'"'," to query the available options."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"currency")," ",(0,r.kt)("em",{parentName:"li"},"Optional, String")," - The currency year to download the file\nin. Will default to ",(0,r.kt)("inlineCode",{parentName:"li"},"defaultCurrency")," on the scenario if available.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  CSV as text string"),(0,r.kt)("h4",{id:"get_scenario_dataframe"},"get","_","scenario","_","dataframe"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get_scenario_dataframe(region: str,\n                           download_type: str,\n                           granularity: str,\n                           currency: Optional[str] = None,\n                           force_no_cache: bool = False)\n")),(0,r.kt)("p",null,"Much the same as ",(0,r.kt)("inlineCode",{parentName:"p"},"get_scenario_data")," but instead parses the CSV as a\npandas data frame for easier consumption via a script. In general, our\nCSVs have two header rows. The first identifies the column of data and\nthe second is a unit string or other contextual information if relevant."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"region")," ",(0,r.kt)("em",{parentName:"li"},"String")," - The region to download for. Use\n",'"',"get_downloadable_regions",'"'," to see a list of options."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"type")," ",(0,r.kt)("em",{parentName:"li"},"String")," - The ",'"',"type",'"'," of file to download. You can use\n",'"',"get_download_types",'"'," to query the available options."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"granularity")," ",(0,r.kt)("em",{parentName:"li"},"String")," - The ",'"',"granularity",'"'," of file to download. You can use\n",'"',"get_download_types",'"'," to query the available options."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"currency")," ",(0,r.kt)("em",{parentName:"li"},"Optional, String")," - The currency year to download the file\nin. Will default to ",(0,r.kt)("inlineCode",{parentName:"li"},"defaultCurrency")," on the scenario if available.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Returns"),":"),(0,r.kt)("p",null,"  Pandas Dataframe"),(0,r.kt)("h4",{id:"refresh"},"refresh"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def refresh()\n")),(0,r.kt)("p",null,"Contacts the service to get an updated view of the scenario. Useful for\nthings such as polling on a frequency."),(0,r.kt)("h4",{id:"get"},"get"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def get(key: str)\n")),(0,r.kt)("p",null,"Shortcut for Scenario.scenario.get()"),(0,r.kt)("h4",{id:"get_latest_scenario_from_region"},"get","_","latest","_","scenario","_","from","_","region"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"@staticmethod\ndef get_latest_scenario_from_region(\n        session: OriginSession,\n        region: str,\n        name_filter: Optional[Union[str, List[str]]] = None)\n")),(0,r.kt)("p",null,"Given a region (and optional name match) will return the latest\nscenario found."))}u.isMDXComponent=!0}}]);