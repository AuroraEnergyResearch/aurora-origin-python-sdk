"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[801],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>_});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=o,_=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(_,i(i({ref:t},p),{},{components:n})):a.createElement(_,i({ref:t},p))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8137:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(7462),o=(n(7294),n(3905));const r={sidebar_label:"OriginSession",title:"origin_sdk.OriginSession"},i=void 0,s={unversionedId:"origin_sdk/OriginSession",id:"origin_sdk/OriginSession",title:"origin_sdk.OriginSession",description:"OriginSession Objects",source:"@site/docs/origin_sdk/OriginSession.md",sourceDirName:"origin_sdk",slug:"/origin_sdk/OriginSession",permalink:"/aurora-origin-python-sdk/docs/origin_sdk/OriginSession",draft:!1,tags:[],version:"current",frontMatter:{sidebar_label:"OriginSession",title:"origin_sdk.OriginSession"},sidebar:"docSidebar",previous:{title:"SDK Reference",permalink:"/aurora-origin-python-sdk/docs/category/sdk-reference"},next:{title:"session",permalink:"/aurora-origin-python-sdk/docs/origin_sdk/gql/queries/input_queries/session"}},l={},c=[{value:"OriginSession Objects",id:"originsession-objects",level:2},{value:"get_aurora_scenarios",id:"get_aurora_scenarios",level:4},{value:"get_scenario_by_id",id:"get_scenario_by_id",level:4},{value:"create_scenario",id:"create_scenario",level:4},{value:"update_scenario",id:"update_scenario",level:4},{value:"delete_scenario",id:"delete_scenario",level:4},{value:"launch_scenario",id:"launch_scenario",level:4},{value:"get_projects",id:"get_projects",level:4},{value:"get_project",id:"get_project",level:4},{value:"create_project",id:"create_project",level:4},{value:"update_project",id:"update_project",level:4},{value:"delete_project",id:"delete_project",level:4},{value:"pin_project",id:"pin_project",level:4},{value:"unpin_project",id:"unpin_project",level:4},{value:"get_meta_json",id:"get_meta_json",level:4},{value:"get_inputs_session",id:"get_inputs_session",level:4},{value:"get_technology_names",id:"get_technology_names",level:4},{value:"get_technology",id:"get_technology",level:4},{value:"update_technology_endogenous",id:"update_technology_endogenous",level:4},{value:"update_technology_exogenous",id:"update_technology_exogenous",level:4},{value:"get_demand_regions",id:"get_demand_regions",level:4},{value:"get_demand",id:"get_demand",level:4},{value:"update_system_demand",id:"update_system_demand",level:4},{value:"get_demand_technology_names",id:"get_demand_technology_names",level:4},{value:"get_demand_technologies",id:"get_demand_technologies",level:4},{value:"update_demand_technology_variable",id:"update_demand_technology_variable",level:4},{value:"get_commodities",id:"get_commodities",level:4},{value:"update_commodity_price",id:"update_commodity_price",level:4},{value:"change_base_commodities_assumptions",id:"change_base_commodities_assumptions",level:4},{value:"get_interconnectors_connections",id:"get_interconnectors_connections",level:4},{value:"get_interconnectors",id:"get_interconnectors",level:4},{value:"update_interconnectors",id:"update_interconnectors",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"originsession-objects"},"OriginSession Objects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"class OriginSession(APISession)\n")),(0,o.kt)("p",null,"Manage access to the Origin API."),(0,o.kt)("p",null,"By default the session will connect to the production Origin API endpoint.\nThis can be overridden by passing the base_url into the constructor or by\nsetting the above environment variables for BASE_URLs. This feature is for\ninternal use only."),(0,o.kt)("p",null,"The authentication token is read from the user","'","s home directory\n",(0,o.kt)("em",{parentName:"p"},"$home/.aurora-api-key")," e.g. ",(0,o.kt)("em",{parentName:"p"},"C:/Users/Joe Bloggs/.aurora-api-key"),". This can\nbe overridden by passing the token into the constructor or by setting the\nenvironment variable ",(0,o.kt)("em",{parentName:"p"},"AURORA_API_KEY"),"."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"token")," ",(0,o.kt)("em",{parentName:"li"},"string, optional")," - Override the api authentication token used for\nAPI access. Defaults to None."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scenario_base_url")," ",(0,o.kt)("em",{parentName:"li"},"string, optional")," - Override the scenario service base url"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"inputs_base_url")," ",(0,o.kt)("em",{parentName:"li"},"string, optional")," - Override the model inputs service base url")),(0,o.kt)("h4",{id:"get_aurora_scenarios"},"get","_","aurora","_","scenarios"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_aurora_scenarios(\n        region: Optional[str] = None) -> List[ScenarioSummaryType]\n")),(0,o.kt)("p",null,"Gets a list of all published Aurora scenarios."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("p",null,"  region (string, optional) - A regional filter. We accept three\nletter ISO codes where appropriate. If in doubt as to which code to\nuse for a region (e.g. Iberia), you can check the Origin URL while\nbrowsing the platform. You will see something like\n",'"',".../launcher/aer/","<","REGION",">",'"'),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"  List","[ScenarioSummaryType]"),(0,o.kt)("h4",{id:"get_scenario_by_id"},"get","_","scenario","_","by","_","id"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_scenario_by_id(scenario_id: str) -> ScenarioType\n")),(0,o.kt)("p",null,"Get a single scenario by it","'","s ID."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("p",null,"  scenario_id (string) - The ID of the scenario"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Returns"),":"),(0,o.kt)("p",null,"  ScenarioType"),(0,o.kt)("h4",{id:"create_scenario"},"create","_","scenario"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def create_scenario(scenario: InputScenario) -> ScenarioType\n")),(0,o.kt)("p",null,"Creates a new scenario"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("p",null,"  scenario (InputScenario) -"),(0,o.kt)("h4",{id:"update_scenario"},"update","_","scenario"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def update_scenario(scenario_update) -> ScenarioType\n")),(0,o.kt)("h4",{id:"delete_scenario"},"delete","_","scenario"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def delete_scenario(scenario_id: str)\n")),(0,o.kt)("h4",{id:"launch_scenario"},"launch","_","scenario"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def launch_scenario(scenario_id: str) -> ScenarioType\n")),(0,o.kt)("h4",{id:"get_projects"},"get","_","projects"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_projects() -> List[ProjectSummaryType]\n")),(0,o.kt)("h4",{id:"get_project"},"get","_","project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_project(project_id: str) -> ProjectType\n")),(0,o.kt)("h4",{id:"create_project"},"create","_","project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def create_project(project: InputProject) -> ProjectSummaryType\n")),(0,o.kt)("h4",{id:"update_project"},"update","_","project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def update_project(project_update) -> ProjectSummaryType\n")),(0,o.kt)("h4",{id:"delete_project"},"delete","_","project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def delete_project(project_id)\n")),(0,o.kt)("h4",{id:"pin_project"},"pin","_","project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def pin_project(project_id)\n")),(0,o.kt)("h4",{id:"unpin_project"},"unpin","_","project"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def unpin_project(project_id)\n")),(0,o.kt)("h4",{id:"get_meta_json"},"get","_","meta","_","json"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_meta_json(meta_url: str)\n")),(0,o.kt)("h4",{id:"get_inputs_session"},"get","_","inputs","_","session"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_inputs_session(scenario_id: str) -> InputsSession\n")),(0,o.kt)("p",null,"Gets the inputs instance information, as well as rehydrating all the\ndata if required"),(0,o.kt)("h4",{id:"get_technology_names"},"get","_","technology","_","names"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef get_technology_names(scenario_id: str) -> TechnologyNames\n")),(0,o.kt)("p",null,"Gets the technology names available for update, by region, and any\nsubtechnology groupings"),(0,o.kt)("h4",{id:"get_technology"},"get","_","technology"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef get_technology(scenario_id: str,\n                   technology_name: str,\n                   region: str,\n                   subregion: Optional[str] = None,\n                   exogenous_sub_technology: Optional[str] = None,\n                   subsidy: Optional[str] = None,\n                   endogenous_sub_technology: Optional[str] = None)\n")),(0,o.kt)("p",null,"Gets a specific technology information and all it","'","s yearly and non\nyearly values available for update"),(0,o.kt)("h4",{id:"update_technology_endogenous"},"update","_","technology","_","endogenous"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef update_technology_endogenous(scenario_id: str,\n                                 technology_name: str,\n                                 parameter: str,\n                                 transform: List[Transform],\n                                 region: str,\n                                 sub_region: Optional[str] = None,\n                                 sub_technology: Optional[str] = None)\n")),(0,o.kt)("p",null,"Updates an endogenous technology assumption."),(0,o.kt)("h4",{id:"update_technology_exogenous"},"update","_","technology","_","exogenous"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef update_technology_exogenous(scenario_id: str,\n                                technology_name: str,\n                                parameter: str,\n                                transform: List[Transform],\n                                region: str,\n                                sub_region: Optional[str] = None,\n                                subsidy: Optional[str] = None,\n                                sub_technology: Optional[str] = None)\n")),(0,o.kt)("p",null,"Updates an exogenous technology assumption."),(0,o.kt)("h4",{id:"get_demand_regions"},"get","_","demand","_","regions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def get_demand_regions(scenario_id: str) -> List[str]\n")),(0,o.kt)("p",null,"Gets the regions of demand available for the current scenario"),(0,o.kt)("h4",{id:"get_demand"},"get","_","demand"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef get_demand(\n        scenario_id: str,\n        demand_filter: Optional[InputsDemandFilter] = None\n) -> List[InputsDemand]\n")),(0,o.kt)("p",null,"Gets system demand and demand technology assumptions for this scenario"),(0,o.kt)("h4",{id:"update_system_demand"},"update","_","system","_","demand"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef update_system_demand(scenario_id: str,\n                         region: str,\n                         variable: str,\n                         transform: List[Transform],\n                         auto_capacity_market_target: Optional[bool] = None)\n")),(0,o.kt)("p",null,"Updates a system demand parameter (one that appears under variables\nof the main demand object, and not one of the demand technologies variables)."),(0,o.kt)("h4",{id:"get_demand_technology_names"},"get","_","demand","_","technology","_","names"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef get_demand_technology_names(\n        scenario_id: str,\n        demand_technology_filter: Optional[Any] = None) -> List[InputsDemand]\n")),(0,o.kt)("p",null,"Gets just demand technology names available, as well as the regions\nthey each belong to."),(0,o.kt)("h4",{id:"get_demand_technologies"},"get","_","demand","_","technologies"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef get_demand_technologies(\n        scenario_id: str,\n        demand_technology_filter: Optional[Any] = None) -> List[InputsDemand]\n")),(0,o.kt)("p",null,"Gets just demand technologies, without system demand information."),(0,o.kt)("h4",{id:"update_demand_technology_variable"},"update","_","demand","_","technology","_","variable"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef update_demand_technology_variable(\n        scenario_id: str,\n        region: str,\n        technology: str,\n        variable: str,\n        transform: List[Transform],\n        auto_capacity_market_target: Optional[bool] = None\n) -> List[InputsDemand]\n")),(0,o.kt)("p",null,"Updates a demand technology variable (one that appears on a\ndemand technology object, rather than on the system level demand\nobject)."),(0,o.kt)("h4",{id:"get_commodities"},"get","_","commodities"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef get_commodities(scenario_id: str,\n                    native_units_flag: Optional[bool] = None,\n                    regions: Optional[List[str]] = None,\n                    commodities: Optional[List[str]] = None)\n")),(0,o.kt)("p",null,"Gets commodities data."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scenario_id")," ",(0,o.kt)("em",{parentName:"li"},"String")," - ID of the scenario to get the commodities data from"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"native_units_flag")," ",(0,o.kt)("em",{parentName:"li"},"Optional, Boolean")," - What units should be used\non the return data, MWh or the ",'"',"native units",'"'," the commodities\ncome in. Defaults to false."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"regions")," ",(0,o.kt)("em",{parentName:"li"},"Optional, List","[String]")," - If given, will filter the\ncommodity prices to the region specifically. By default, we will\nperform an equally weighted global average."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"commodities")," ",(0,o.kt)("em",{parentName:"li"},"Optional, List","[String]")," - If given, will filter the\ncommodities to the ones specified. By default, we will\nquery for all commodities.")),(0,o.kt)("h4",{id:"update_commodity_price"},"update","_","commodity","_","price"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef update_commodity_price(scenario_id: str,\n                           commodity: str,\n                           regions: List[str],\n                           transform: List[Transform],\n                           native_units_flag: Optional[bool] = None)\n")),(0,o.kt)("p",null,"Updates a commodity price."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scenario_id")," ",(0,o.kt)("em",{parentName:"li"},"String")," - ID of the scenario to get the commodities data from\ncome in. Defaults to false."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"commodity")," ",(0,o.kt)("em",{parentName:"li"},"String")," - The commodity to update."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"regions")," ",(0,o.kt)("em",{parentName:"li"},"List","[String]")," - The regions to update. You can use the\nregions array on the ",'"',"get commodities",'"'," return object to inform the\nview you should update."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transform")," ",(0,o.kt)("em",{parentName:"li"},"List","[Transform]")," - The transform array used in all updates"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"native_units_flag")," ",(0,o.kt)("em",{parentName:"li"},"Optional, Boolean")," - What units should be used\non the return data, MWh or the ",'"',"native units",'"'," the commodities")),(0,o.kt)("h4",{id:"change_base_commodities_assumptions"},"change","_","base","_","commodities","_","assumptions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef change_base_commodities_assumptions(scenario_id: str,\n                                        rebase_reference_id: str)\n")),(0,o.kt)("p",null,"Function to change the underlying commodities assumptions. This\nchanges the ",(0,o.kt)("em",{parentName:"p"},"original")," values, and then any changes you have made (e.g.\n+15%) will apply over the top."),(0,o.kt)("h4",{id:"get_interconnectors_connections"},"get","_","interconnectors","_","connections"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef get_interconnectors_connections(scenario_id: str) -> Dict[str, List[str]]\n")),(0,o.kt)("p",null,"Gets a dictionary of interconnector connections between regions for\nthe given scenario."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scenario_id")," ",(0,o.kt)("em",{parentName:"li"},"String")," - ID of the scenario to get the interconnector data from")),(0,o.kt)("h4",{id:"get_interconnectors"},"get","_","interconnectors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef get_interconnectors(scenario_id: str, region: str, connection_region: str)\n")),(0,o.kt)("p",null,"Gets the interconnector data between two regions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scenario_id")," ",(0,o.kt)("em",{parentName:"li"},"String")," - ID of the scenario to get the interconnector data from"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"region")," ",(0,o.kt)("em",{parentName:"li"},"String")," - The region the interconnector is to/from"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"connection_region")," ",(0,o.kt)("em",{parentName:"li"},"String")," - The connected region the interconnector is from/to")),(0,o.kt)("h4",{id:"update_interconnectors"},"update","_","interconnectors"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"@access_next_data_key_decorator\ndef update_interconnectors(scenario_id: str, from_region: str, to_region: str,\n                           variable: str, transform: List[Transform])\n")),(0,o.kt)("p",null,"Function to update a interconnector variable between two regions."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Arguments"),":"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"scenario_id")," ",(0,o.kt)("em",{parentName:"li"},"String")," - ID of the scenario to update the interconnector data from"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"from_region")," ",(0,o.kt)("em",{parentName:"li"},"String")," - The region the interconnector is from"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"to_region")," ",(0,o.kt)("em",{parentName:"li"},"String")," - The region the interconnector is to"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"variable")," ",(0,o.kt)("em",{parentName:"li"},"String")," - The variable to update"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"transform")," ",(0,o.kt)("em",{parentName:"li"},"List","[Transform]")," - The transform array used in all updates")))}u.isMDXComponent=!0}}]);